<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wdfqx Blog</title>
  
  <subtitle>爱你所爱，知你所知，得你所愿</subtitle>
  <link href="https://blog.wdfqx.top/atom.xml" rel="self"/>
  
  <link href="https://blog.wdfqx.top/"/>
  <updated>2025-08-28T14:57:35.000Z</updated>
  <id>https://blog.wdfqx.top/</id>
  
  <author>
    <name>wdfqx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你的网站是怎么被墙的</title>
    <link href="https://blog.wdfqx.top/posts/6daf32bc/"/>
    <id>https://blog.wdfqx.top/posts/6daf32bc/</id>
    <published>2025-08-28T14:57:35.000Z</published>
    <updated>2025-08-28T14:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h2><p>某天，你打开你的网站，却看到了这样的画面</p><p><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250827234503712.webp" alt="connection-closed.webp"></p><p>你本能地打开curl进行分析，结果终端的输出更加诡异：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wdfqx@wdfqx:~/docs/img$ curl -v example.com</span><br><span class="line">* Host example.com:80 was resolved.</span><br><span class="line">* IPv6: 2404:6800:4005:817::200e</span><br><span class="line">* IPv4: 142.250.197.142</span><br><span class="line">*   Trying [2404:6800:4005:817::200e]:80...</span><br><span class="line">* Connected to example.com (2404:6800:4005:817::200e) port 80</span><br><span class="line">* using HTTP/1.x</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: example.com</span><br><span class="line">&gt; User-Agent: curl/8.14.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">* Request completely sent off</span><br><span class="line">* Empty reply from server</span><br><span class="line">* shutting down connection <span class="comment">#0</span></span><br><span class="line">curl: (52) Empty reply from server</span><br></pre></td></tr></table></figure><p>没错，你的网站就这么被墙了。TCP连接已经建立，却在请求的时候被阻断。这不是一个简单的访问失败，而是防火墙和网站运营者间近30年的对抗。</p><p><strong>为什么你的网站会被墙？网站被墙的时候，你访问这个网站的时候发生了什么？</strong></p><h2 id="1-网站为什么会被墙？"><a href="#1-网站为什么会被墙？" class="headerlink" title="1.网站为什么会被墙？"></a>1.网站为什么会被墙？</h2><p>互联网上的内容极其丰富，存在着各种不同观点、立场的，合法或非法的内容。为了阻止国民访问不符合其价值观、违反该国法律的内容，就会对网络上的内容进行封锁，在学术上称作“互联网内容治理”或“数字边界管控”。</p><h2 id="2-网站是怎么被墙的？"><a href="#2-网站是怎么被墙的？" class="headerlink" title="2.网站是怎么被墙的？"></a>2.网站是怎么被墙的？</h2><h3 id="2-1-审查流量内容"><a href="#2-1-审查流量内容" class="headerlink" title="2.1 审查流量内容"></a>2.1 审查流量内容</h3><p>在互联网建立之初（1990s-2000早期），绝大多数的网站都没有采用HTTPS来对连接进行加密，使用明文传输内容**（HTTP协议）**致使流量内容极其透明，网络链路中任何一个设备都能监听甚至篡改数据包中的内容。</p><p>这时，防火墙会给你的流量做<strong>深度包检测（Deep Pachet Inspection，DPI）</strong> ，检查数据包**载荷（Payload）**中是否存在违禁词黑名单中的词汇。</p><ul><li><p>如果检测到，就会丢弃数据包或向双方发送一个伪造的TCP RST数据包切断这次连接。</p></li><li><p>如果没检测到，就会正常放行并继续监听和审查连接内容。</p></li></ul><p>这种方法<strong>极其简单粗暴</strong>，但<strong>严重侵犯用户隐私</strong>且效率<strong>极低</strong><br>随着互联网安全意识的普及，使用SSL&#x2F;TLS加密连接的HTTPS成为主流的网页协议，传输内容变成了乱码一般的密文。防火墙再也不能进行DPI了，这种方法也就彻底失效了<del>（别用1990年至今未更新的古董系统杠我，你杠就是你对）</del> 。</p><blockquote><p>说人话：防火墙一直在监控你的一举一动，看到有“不良内容”就直接替你扔掉</p></blockquote><h3 id="2-2-基于IP的封锁"><a href="#2-2-基于IP的封锁" class="headerlink" title="2.2 基于IP的封锁"></a>2.2 基于IP的封锁</h3><p>HTTPS把流量加密之后，基于流量内容的关键词检测（对，早期审查就这样）失效后，防火墙转向对IP地址的封锁，但这个方法有诸多问题，下文细说。防火墙维护一个庞大的IP黑名单，如果用户发送的数据包的目标IP是黑名单里的IP会直接丢弃数据包或者返回一个TCP RST数据包重置连接，这就是为什么你访问一些服务会收到浏览器的”ERR_CONNECTION_RESET”报告，如果你确定服务是正常的，那就肯定是防火墙作怪了。</p><blockquote><p><em>注：正常情况下也可能收到RST数据包，例如端口（Port）不开放或服务端（Server）刻意拒绝你的连接等。</em></p></blockquote><p>很明显的，这种封锁方法的弊端极大，不仅不能有效封锁违法网站，还会误伤大量的合法网站。<br>其一，是非法网站的IP地址黑名单会不断地更新以对抗封锁，一直封IP难道还要把全世界的IP全部封完么？<br>其二，是封锁IP极易误伤，公共托管商的一个IP地址托管了成千上万的网站，封禁一个网站就连带封锁了其他所有网站，所以成本难以估量。</p><p>就这么的，基于IP的封锁不久之后就不再作为主要的封锁方法，只作为辅助方法。</p><blockquote><p>人话：防火墙直接把目标网站IP一顿乱封，结果发现伤敌一千自损八万，就放弃了（战术摊手.webp）</p></blockquote><h3 id="2-3-基于域名的封锁"><a href="#2-3-基于域名的封锁" class="headerlink" title="2.3 基于域名的封锁"></a>2.3 基于域名的封锁</h3><blockquote><p>诚然，加密解决了传输安全性，也在一定程度上暂时地使得防火墙不能有效的屏蔽互联网网站，但是为了正确地交换数据包，HTTPS协议还有一个字段是明文的： <strong>SNI（Server Name Indication，服务器名称指示）。</strong> </p></blockquote><p>防火墙在经历了DPI和IP封锁的失效之后，痛定思痛，进化出了SNI识别技术（其实本质还是DPI）。<br>这时，防火墙维护一个域名黑名单，如果用户发送的数据包中的SNI字段匹配了黑名单已有的**域名（Domain Name），**则防火墙会丢弃数据包或发送RST数据包，切断连接；如果用户发送的数据包的SNI字段没有匹配，则会放行。这样的话，你就会发现一个神奇的现象：给某个域名对应地址发送数据包，如果不带SNI，连接能通，如果带上，就阻断了，这就是域名被屏蔽而IP没有被封导致的。</p><p>这种方式从2010年代到现在一直是防火墙的主要封锁方法，针对域名的封锁可以做到更加精确，更加简单。</p><blockquote><p>人话：防火墙看见你访问的域名（SNI）是“不良网站”就直接掐掉连接</p></blockquote><h3 id="2-4-基于特征的封锁"><a href="#2-4-基于特征的封锁" class="headerlink" title="2.4 基于特征的封锁"></a>2.4 基于特征的封锁</h3><p>基于域名的封锁方法在技术的演进中，也显现出了部分弊端，例如对SNI的依赖导致如果客户端和服务器使用特殊的连接方法故意地抹去或者篡改SNI字段，防火墙的封锁就会失效，这种方法被称作**“域前置”（Domain Fronting）。** <del>尽管这种方法违反<a href="https://datatracker.ietf.org/doc/html/rfc6066">RFC规范</a>而被一般浏览器拒绝就是</del><br>天空一声巨响，DPI闪亮登场，防火墙接着进化，面对这种耍赖的行为产生新的方法应对：深度包检测<del>（当然，这次不是1990年代那个菜鸡版本）</del> ，会<strong>检测数据包时序、数据包大小、数据指纹</strong>等多种流量特征综合判断流量的类型并推测网站类型</p><blockquote><p>说人话：防火墙不需要看你到底在做什么，它只需要通过数据包特征猜你在干啥就行了，你的流量在它面前约等于这个：<br><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250828222410439.webp" alt="保密发货.webp"></p></blockquote><h2 id="3-后记"><a href="#3-后记" class="headerlink" title="3.后记"></a>3.后记</h2><h3 id="3-1-建议"><a href="#3-1-建议" class="headerlink" title="3.1 建议"></a>3.1 建议</h3><p>所以说，你的网站被墙，就这几点原因：</p><ol><li><p>你网站服务器IP被防火墙封了，纯误伤，建议换一个服务商</p></li><li><p>你真违规了，网站域名被封，这个帮不了你，以后记得守法</p></li><li><p>你网站的流量特征看起来像违禁内容，这个也是误伤，以后偷感别那么强</p></li></ol><h3 id="3-2-免责声明"><a href="#3-2-免责声明" class="headerlink" title="3.2 免责声明"></a>3.2 免责声明</h3><p>本文旨在进行纯粹的技术原理探讨与科普交流，所有内容均基于公开的互联网技术标准与协议（如RFC）进行解读，不涉及任何非公开信息或内部机制。文章仅讨论技术实现原理，并非对任何特定网络管理政策的解读或评论，亦不构成任何专业建议。<br>文中所述技术方法（如DPI、SNI过滤等）为网络安全领域的通用概念，所表达的观点均为作者基于技术事实的个人理解，与任何组织或机构无关。信息可能存在滞后或疏漏，仅供参考。<br>坚决反对任何形式的网络违法犯罪行为，请读者遵守所在地法律法规，合理使用网络技术。</p><h3 id="3-3-注解"><a href="#3-3-注解" class="headerlink" title="3.3 注解"></a>3.3 注解</h3><ol><li>DPI&#x2F;深度包检测：对数据包的内容、特征等进行检查以审查互联网通信的机制|人话：防火墙检查流量用的</li><li>SNI&#x2F;服务器名称指示：TLS的一个扩展字段，用于标识访问的网站域名以快速匹配证书|人话：优化TLS握手用的</li><li>TCP RST数据包：TCP（传输控制协议）中用于直接切断一个连接的数据包，可能会在端口不存在、不开放或服务器不想与连接对象建立连接的时候被发送|人话：掐断连接用的</li><li>Domain Fronting&#x2F;域前置：将TLS握手中的SNI字段替换为大型网站的域名用以对抗封锁的一种方式，通常配合CDN使用|人话：对抗防火墙的，好孩子不要学，而且现在绝大多数CDN服务商由于滥用问题已经禁止使用这种方法。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-引言&quot;&gt;&lt;a href=&quot;#0-引言&quot; class=&quot;headerlink&quot; title=&quot;0.引言&quot;&gt;&lt;/a&gt;0.引言&lt;/h2&gt;&lt;p&gt;某天，你打开你的网站，却看到了这样的画面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdmirror.cn</summary>
      
    
    
    
    <category term="科普" scheme="https://blog.wdfqx.top/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="互联网" scheme="https://blog.wdfqx.top/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    <category term="深度学习" scheme="https://blog.wdfqx.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="机器学习" scheme="https://blog.wdfqx.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="DNS污染" scheme="https://blog.wdfqx.top/tags/DNS%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>如何科学地消除敏感词</title>
    <link href="https://blog.wdfqx.top/posts/4ede31b/"/>
    <id>https://blog.wdfqx.top/posts/4ede31b/</id>
    <published>2025-08-13T16:39:15.000Z</published>
    <updated>2025-08-13T16:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h2><p>某天深夜，当你正在社交媒体激情输出观点时，突然收到系统提示：”您发布的内容包含敏感信息”——这熟悉的红色感叹号背后，藏着怎样一套精密运转的”文字安检仪”？今天我们就来拆解这个让创作者又爱又恨的<strong>敏感词过滤系统</strong>。</p><h2 id="1-石器时代的过滤：关键词匹配"><a href="#1-石器时代的过滤：关键词匹配" class="headerlink" title="1. 石器时代的过滤：关键词匹配"></a>1. 石器时代的过滤：关键词匹配</h2><p>早期的敏感词过滤简单得令人感动，就像用渔网捞鱼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初代过滤器的灵魂代码（伪代码，仅为演示使用）</span></span><br><span class="line">banned_words = [<span class="string">&quot;枪&quot;</span>, <span class="string">&quot;毒&quot;</span>, <span class="string">&quot;黄&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> banned_words:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> user_input:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;检测到敏感内容&quot;</span></span><br></pre></td></tr></table></figure><p>这种<strong>精确匹配</strong>算法在2000年代初大行其道，但很快暴露致命缺陷：</p><ul><li>“小黄车共享单车”被误杀</li><li>“枪支管理法”被误杀</li><li>“白粉（指化妆品）”被误杀</li></ul><p><strong>此时系统就像过度紧张的保安，看见黑色行李箱就报警</strong>。据2012年某论坛统计，这种规则导致的误判率高达37%，催生了第一代”和谐文化”——用拼音缩写（如”sq”代替”色情”）轻松绕过检测。</p><blockquote><p>趣闻：当时最著名的对抗案例是用户用”弓虽”拆分”强”字，系统竟真的无法识别（战术挠头.jpg）</p></blockquote><h2 id="2-进化之路：模糊匹配与语义分析"><a href="#2-进化之路：模糊匹配与语义分析" class="headerlink" title="2. 进化之路：模糊匹配与语义分析"></a>2. 进化之路：模糊匹配与语义分析</h2><p>当简单的关键词匹配沦为笑谈，第二代系统开始引入更聪明的技术：</p><h3 id="2-1-正则表达式升级版"><a href="#2-1-正则表达式升级版" class="headerlink" title="2.1 正则表达式升级版"></a>2.1 正则表达式升级版</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 匹配变体写法</span><br><span class="line">(枪|木仓|qiang|🔫)</span><br></pre></td></tr></table></figure><p>这种模式虽然能识别”木仓”等变体，但维护成本极高——每个新词需要人工添加数十种变体写法，堪称”程序员与用户的军备竞赛”。</p><h3 id="2-2-语义分析登场"><a href="#2-2-语义分析登场" class="headerlink" title="2.2 语义分析登场"></a>2.2 语义分析登场</h3><p>2015年后，NLP技术开始拯救这场混战：</p><ul><li><strong>同义词扩展</strong>：自动生成”毒品→违禁药品→白粉（非化妆品义项）”的关联网络</li><li><strong>上下文判断</strong>：”射击游戏”vs”射击路人”的差异识别</li><li><strong>拼音转换</strong>：先转为拼音再检测，应对谐音梗</li></ul><p>某社交平台数据显示，引入语义分析后误判率降至12%，但用户很快找到新漏洞——<strong>emoji密码学</strong>：<br>🚬💊&#x3D;毒品交易<br>🐔💃&#x3D;色情服务</p><h2 id="3-现代武器库：机器学习与深度学习"><a href="#3-现代武器库：机器学习与深度学习" class="headerlink" title="3. 现代武器库：机器学习与深度学习"></a>3. 现代武器库：机器学习与深度学习</h2><p>今天的敏感词系统已经武装到牙齿，其核心技术栈包括：</p><h3 id="3-1-词向量模型"><a href="#3-1-词向量模型" class="headerlink" title="3.1 词向量模型"></a>3.1 词向量模型</h3><p>通过Word2Vec等工具，系统能理解：</p><ul><li>“代购”≈”走私”（相似度0.82）</li><li>“比特币”≠”货币”（相似度0.23）</li></ul><p><strong>这就好比给系统安装了语义GPS</strong>，即使遇到”数字黄金”这种隐喻表述也能触发警报。</p><h3 id="3-2-深度学习分类器"><a href="#3-2-深度学习分类器" class="headerlink" title="3.2 深度学习分类器"></a>3.2 深度学习分类器</h3><p>典型的双通道检测架构：</p><p><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250725023642874.webp"></p><h2 id="4-攻防永动机：对抗样本与系统反制"><a href="#4-攻防永动机：对抗样本与系统反制" class="headerlink" title="4. 攻防永动机：对抗样本与系统反制"></a>4. 攻防永动机：对抗样本与系统反制</h2><p>当前沿技术相遇，出现了令人啼笑皆非的攻防战：</p><h3 id="4-1-用户的奇招"><a href="#4-1-用户的奇招" class="headerlink" title="4.1 用户的奇招"></a>4.1 用户的奇招</h3><ul><li><strong>通假字攻击</strong>：用”亻七”代替”他”</li><li><strong>零宽度字符</strong>：插入不可见unicode字符</li><li><strong>藏头诗</strong>：每行首字组合成敏感词</li></ul><h3 id="4-2-系统的反制"><a href="#4-2-系统的反制" class="headerlink" title="4.2 系统的反制"></a>4.2 系统的反制</h3><ul><li><strong>字形拆解</strong>：检测”⺼方攵”&#x3D;”毒”的部件组合</li><li><strong>语音转写</strong>：识别语音中的谐音内容</li><li><strong>行为分析</strong>：频繁编辑&#x2F;删除记录触发风控</li></ul><p>最戏剧性的案例是：某用户用”🍉🐂🍺”暗示敏感事件，系统竟通过学习网络热词成功拦截（这AI怕是5G冲浪选手）。</p><h2 id="5-技术之外的困境"><a href="#5-技术之外的困境" class="headerlink" title="5. 技术之外的困境"></a>5. 技术之外的困境</h2><p>当我们在2025年审视这套系统，会发现几个根本矛盾：</p><ol><li><strong>误伤创新表达</strong>：某小说描写吸毒情节被下架，尽管主旨是禁毒</li><li><strong>文化差异问题</strong>：”菊花”在中文是植物，在某些语境却是敏感词</li><li><strong>审核疲劳</strong>：某平台审核员日均处理2000条内容，错误率随工作时长飙升</li></ol><p>正如某AI伦理研究员所说：”我们建造的不仅是过滤器，更是数字时代的语言边界。”</p><hr><p><strong>技术冷知识</strong>：</p><ul><li>中文敏感词库平均每月更新300+新词</li><li>“疫情”一词在2020年新增42种变体写法</li><li>最长的敏感词是16字的特定政治口号</li></ul><hr><p><strong>参考资料：</strong></p><p><a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式 - Wikipedia</a><br><a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86">自然语言处理 - Wikipedia</a><br><a href="https://zh.wikipedia.org/wiki/%E9%97%9C%E9%8D%B5%E8%A9%9E%E9%81%8E%E6%BF%BE">关键词过滤 - Wikipedia</a><br><a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0">深度学习 - Wikipedia</a><br><a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">机器学习 - Wikipedia</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-引言&quot;&gt;&lt;a href=&quot;#0-引言&quot; class=&quot;headerlink&quot; title=&quot;0.引言&quot;&gt;&lt;/a&gt;0.引言&lt;/h2&gt;&lt;p&gt;某天深夜，当你正在社交媒体激情输出观点时，突然收到系统提示：”您发布的内容包含敏感信息”——这熟悉的红色感叹号背后，藏着怎样</summary>
      
    
    
    
    <category term="科普" scheme="https://blog.wdfqx.top/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="算法" scheme="https://blog.wdfqx.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="深度学习" scheme="https://blog.wdfqx.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="机器学习" scheme="https://blog.wdfqx.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="敏感词" scheme="https://blog.wdfqx.top/tags/%E6%95%8F%E6%84%9F%E8%AF%8D/"/>
    
    <category term="内容审核" scheme="https://blog.wdfqx.top/tags/%E5%86%85%E5%AE%B9%E5%AE%A1%E6%A0%B8/"/>
    
    <category term="NLP" scheme="https://blog.wdfqx.top/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>如何安全地加密数据</title>
    <link href="https://blog.wdfqx.top/posts/26dbb5b5/"/>
    <id>https://blog.wdfqx.top/posts/26dbb5b5/</id>
    <published>2025-08-09T13:58:49.000Z</published>
    <updated>2025-08-09T13:58:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0. 引言"></a>0. 引言</h2><p>2011年，著名中国技术论坛CSDN因为明文存储用户的密码及SQL数据库被攻击者注入等原因，泄露了600余万用户的完全未经脱敏的私人信息，包括但不限于用户名、密码、Email地址等，导致了大量用户被撞库攻击，成为数据安全行业的反面教材——这体现了数据加密和密码哈希化的必要性。<br>这起事件后期推动了数据加密的潮流，越来越多的人开始重视自己的数据安全。数据安全几乎是最重要的一个部分就是加密，那么我们怎么安全地加密数据呢？</p><h3 id="0-1-加密是什么？"><a href="#0-1-加密是什么？" class="headerlink" title="0.1 加密是什么？"></a>0.1 加密是什么？</h3><p>加密就是将 <strong>明文（Plaintext）</strong> 以加密<strong>算法（Algorithm）<strong>进行</strong>加密（Encryption）<strong>过程后变换为密文用以保护数据的过程，加密过程需要的主要套件如下：<br><strong>加密技术（Cryptography）</strong> 、<strong>密钥（Key）</strong> 、加密</strong>算法（Algorithm）</strong></p><h2 id="1-使用对称加密技术"><a href="#1-使用对称加密技术" class="headerlink" title="1. 使用对称加密技术"></a>1. 使用对称加密技术</h2><h3 id="1-1-第一个安全技术——DES"><a href="#1-1-第一个安全技术——DES" class="headerlink" title="1.1 第一个安全技术——DES"></a>1.1 第一个安全技术——DES</h3><p><strong>DES（Data Encryption Standard，数据加密标准）</strong> ，推出于1977年，由美国国家标准局（NBS）开发，使用56位的密钥进行加密（在实际使用中是64位密钥，但密钥中有8位为校验码，实际有效的位数是56位）。这也是第一个<strong>对称加密技术（Symmetric Encryption）</strong> ，加密和解密使用同一个密钥，高效而简单、优雅，一切看起来都那么地完美，对吧？</p><p><em>但所有的完美都是易碎的</em> 。1990年，一组由美国密码学家Richard Schappbach领导的团队使用专门定制的硬件在48小时以内穷举破解了DES加密的数据；1993年， 迪安·艾尔曼（Dean Elmore）以一组112个专用芯片设备8小时破解了DES加密技术；1998年，EFF赞助的一个团队使用造价为25万美元的硬件在56小时内破解了DES加密的数据……随着计算机算力的高速增长，破解DES变得易如反掌，DES在2005年被NBS宣布停止使用，不再安全。该算法的变体3DES使用3个不同的密钥（共计112[DES-EDE2标准]或168有效位[DES-EDE3标准]）进行3次DES加密数据，但该算法在2023年也被宣布不再安全，停止用于新的应用，存量应用则要在2030年以前完全停用3DES加密标准。<br>所以，现在如果你使用DES或3DES算法，就相当于用挂锁锁原子弹，<strong>安全性无限趋近于零</strong> ！（战术摊手.webp）</p><p>同样，还有更多的对称加密技术被宣告不安全，在此列表简单说明：</p><table><thead><tr><th>算法</th><th>密钥长度</th><th>缺陷</th><th>历史意义</th></tr></thead><tbody><tr><td>Blowfish</td><td>32~448位</td><td>存在生日攻击风险，作者已弃用</td><td>早期SSL标准的加密算法</td></tr><tr><td>RC4</td><td>40~2048位</td><td>因密钥重用导致出现漏洞，被RFC禁止</td><td>历史上最快的流加密技术</td></tr></tbody></table><h3 id="1-2-更进一步的安全——AES"><a href="#1-2-更进一步的安全——AES" class="headerlink" title="1.2 更进一步的安全——AES"></a>1.2 更进一步的安全——AES</h3><p>1997年，NIST（美国国家标准与技术研究院）发起了一项公开竞赛，征集新的加密标准，经过数论评估，来自比利时的Joan Daemen和Vincent Rijmen设计的Rijndael算法被选为 <strong>AES（Advanced Encryption Standard，高级加密标准）</strong> 标准。2001年，NIST正式发布了AES标准，它支持128、192、256位三种密钥长度，在对称加密领域发挥极大作用，广泛用于各类协议，例如WPA2&#x2F;3（用于WiFi身份认证和加密）、SSL&#x2F;TLS（用于传输加密，<a href="/posts/26dbb5b5/../../posts/a3e6861f/">本文</a>提到）、VPN（用于建立虚拟加密通信信道，例如企业内网）、硬盘加密等，一切看起来都那么完美，优雅而简单。</p><p><em>所有的完美也确实都很易碎，只是时间问题而已</em> 。在后量子时代，量子计算机的威胁变得越加明显，例如Shor算法和Grover算法在理论上能够破解AES加密技术，Shor算法仍可破解但时间非常长；Grover算法能够将密钥搜索范围简化到平方根程度，例如AES-128的搜索空间为2^64个密钥，AES-256的搜索空间为2^128个密钥。虽然量子计算机的Grover算法会降低AES的安全性，但密钥最位数最多的AES-256被普遍估计在将来的10年内（2025-2035）仍然有足够的位数（2^128位）来抵御Grover算法攻击。</p><p>当然，还有更多的加密技术，例如Google力推的ChaCha20加密算法、Salsa20（ChaCha20前身）等，在此列表说明：</p><table><thead><tr><th>算法</th><th>密钥长度</th><th>特点</th></tr></thead><tbody><tr><td>ChaCha20</td><td>256位</td><td>在移动端的性能优于AES且抗侧信道攻击，用于TLS1.3</td></tr><tr><td>Salsa20</td><td>256位</td><td>ChaCha20前身，设计简洁，用于开源项目</td></tr><tr><td>Twofish</td><td>128&#x2F;256位</td><td>AES竞赛亚军，比AES更加灵活但没有普及，用于学术研究</td></tr><tr><td>Serpent</td><td>128&#x2F;256位</td><td>AES竞赛季军，安全性极高但速度较慢，用于开源项目</td></tr></tbody></table><h2 id="2-使用非对称加密技术"><a href="#2-使用非对称加密技术" class="headerlink" title="2. 使用非对称加密技术"></a>2. 使用非对称加密技术</h2><h3 id="2-1-质因数分解的魔法——RSA"><a href="#2-1-质因数分解的魔法——RSA" class="headerlink" title="2.1 质因数分解的魔法——RSA"></a>2.1 质因数分解的魔法——RSA</h3><p><strong>RSA (Rivest-Shamir-Adleman)</strong> 通过 <strong>单向陷门函数（Trapdoor One-Way Function）</strong> 在未掌握陷门的情况下极难破解的特性实现数据安全，两个巨大质数p、q乘积为N，而私钥ϕ(N)（等价于p和q）即为陷门，拥有陷门的人可以快速地解密和加密数据；而没有陷门的人能看到的只有公钥中的N（即pxq的乘积），以及一些辅助信息。他们需要得到ϕ(N)才能解密数据，最简单但运算量也最大的方法是分解质因数，但一个足够大的合数𝑁在目前已知的经典计算方法下，所需分解时间会非常非常长，超出任何实际可接受的范围。所以，我们通常认为在可接受的时间内，它是无法被破解的。</p><blockquote><p><strong>说人话版</strong> ：<br>RSA的安全性的实质其实就是我们在小学五六年级学到的“质因数分解”，但它巧妙地将两个极其巨大的质数相乘计算得一个同样巨大的合数。由于被分解的合数过大导致不能在我们能接受的时间内计算出结果，所以我们将其近似看作无法破解。当然，在量子计算机迅猛发展的当下，RSA也并不安全，Shor算法能够高效地进行质因数分解运算，所以量子计算机一来RSA也得趴窝（战术摊手.webp）</p></blockquote><h3 id="2-2-椭圆曲线的谜题——ECC"><a href="#2-2-椭圆曲线的谜题——ECC" class="headerlink" title="2.2 椭圆曲线的谜题——ECC"></a>2.2 椭圆曲线的谜题——ECC</h3><p><strong>ECC（Elliptic Curve Cryptography，椭圆曲线密码学）</strong> 以 <strong>椭圆曲线离散对数问题 (EC-DLP)</strong> 的困难性保证密钥不被破解，具体的算法是：给定椭圆曲线上一个点P和另一个点Q，判断Q是否是P的某个倍数（kP），但找到k是极其困难的。由于算法大大简化，所以ECC能够在更短的密钥长度下提供相同的安全性，而所需的性能开销也更小、计算速度更快、占用空间更小，适合移动设备和资源受限场景，广泛应用于SSL&#x2F;TLS、数字签名（ECDSA）、密钥交换（ECDH）等场景。因为ECDLP的证明没有捷径，所以经典计算机需要极长的时间来破解ECDLP密钥，我们也将其近似看作无法破解。</p><blockquote><p><strong>说人话版</strong> ：</p><p>这玩意就是用椭圆曲线的难题保证密钥安全性和数据安全的，说白了就是算一道没有简便方法的椭圆曲线证明题，所以这个算法比RSA更轻，更快。但这玩意也照样不抗量子计算机，Shor算法一来直接趴窝，<strong>草（一种植物）！</strong></p></blockquote><h3 id="2-3-离散对数的难题——DH"><a href="#2-3-离散对数的难题——DH" class="headerlink" title="2.3 离散对数的难题——DH"></a>2.3 离散对数的难题——DH</h3><p><strong>Diffie-Hellman (DH)</strong> 基于离散对数问题的困难性保护数据安全，即在一个有限域中，给定一个基数g、一个模数p，以及g的x次幂取模p的结果（g^x mod p），很难从中计算出x的值。但这个加密算法压根就不用来加密数据，而是用于交换密钥的，常见于TLS协议的密钥交换协议部分（详见<a href="/posts/26dbb5b5/../../posts/a3e6861f/">本文</a>）。它的核心、唯一功能就是让双方在不传输明文密钥的情况下协商出一个相同的密钥用于加密。</p><blockquote><p><strong>说人话版</strong> ：</p><p>这玩意不是拿来传数据的，是拿来协商密钥的，就凭着离散对数题难到爆炸的性质保护协商密钥的安全性，这破题难得要命，我也不知道咋讲，<strong>草（一种植物）！</strong></p></blockquote><hr><p><strong>参考资料</strong> ：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86">加密 - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86">对称加密 - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96">DES - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">AES - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA加密算法 - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6">椭圆曲线密码学 - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B">Diffie-Hellman密钥交换 - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/ChaCha20">ChaCha20 - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/Blowfish">Blowfish - Wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/RC4">RC4 - Wikipedia</a></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-引言&quot;&gt;&lt;a href=&quot;#0-引言&quot; class=&quot;headerlink&quot; title=&quot;0. 引言&quot;&gt;&lt;/a&gt;0. 引言&lt;/h2&gt;&lt;p&gt;2011年，著名中国技术论坛CSDN因为明文存储用户的密码及SQL数据库被攻击者注入等原因，泄露了600余万用户的完全未</summary>
      
    
    
    
    <category term="科普" scheme="https://blog.wdfqx.top/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="密码学" scheme="https://blog.wdfqx.top/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="加密算法" scheme="https://blog.wdfqx.top/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    <category term="对称加密" scheme="https://blog.wdfqx.top/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="非对称加密" scheme="https://blog.wdfqx.top/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="AES" scheme="https://blog.wdfqx.top/tags/AES/"/>
    
    <category term="RSA" scheme="https://blog.wdfqx.top/tags/RSA/"/>
    
    <category term="ECC" scheme="https://blog.wdfqx.top/tags/ECC/"/>
    
  </entry>
  
  <entry>
    <title>网络通信是怎么加密的</title>
    <link href="https://blog.wdfqx.top/posts/a3e6861f/"/>
    <id>https://blog.wdfqx.top/posts/a3e6861f/</id>
    <published>2025-08-04T16:20:28.000Z</published>
    <updated>2025-08-04T16:20:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h2><p>这是Google的官方网站，在这里我们可以看到浏览器地址栏有一个“tune”图标表示这个连接是安全的。同时，我们可以点击这个图标，会跳出一个卡片（也就是图中的那个），显示一些扩展信息，比如“证书”之类。<br>那么……为什么浏览器会显示这个图标呢？它是怎么判断连接是否“安全”的？<br><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250804003918390.webp"><br><strong>浏览器怎么定义“安全”？为什么要有这个图标？</strong><br>答案是<strong>HTTPS（Hypertext Transfer Protocol Secure，超文本传输安全协议）</strong>，它通过一系列手段将网络通信的内容加密避免被攻击者截获。在互联网建立初期（1990年代-2000年代初期），绝大多数互联网通信都是明文的，很容易被截获，当HTTPS出现后浏览器为将HTTPS网站和HTTP网站区分就在HTTPS网站上加了这个图标。</p><h2 id="0-1-HTTPS是怎么加密的？"><a href="#0-1-HTTPS是怎么加密的？" class="headerlink" title="0.1 HTTPS是怎么加密的？"></a>0.1 HTTPS是怎么加密的？</h2><p>HTTPS的加密依赖的是<strong>TLS（Transport Layer Security，传输层安全性协议）<strong>加密；而2010年之前主要是其前身</strong>SSL（Secure Sockets Layer，安全套接层）</strong>。所以HTTPS相较明文传输的 <strong>HTTP（Hypertext Transfer Protocol）</strong> 多了一层加密保护数据的安全。</p><h2 id="1-密钥是怎么共享的？"><a href="#1-密钥是怎么共享的？" class="headerlink" title="1.密钥是怎么共享的？"></a>1.密钥是怎么共享的？</h2><h3 id="1-1-TLS做了什么？"><a href="#1-1-TLS做了什么？" class="headerlink" title="1.1 TLS做了什么？"></a>1.1 TLS做了什么？</h3><p>TLS的本质是<strong>非对称加密（Asymmetric cryptography）<strong>和</strong>对称加密（Symmetric-key algorithm）<strong>的结合，其中，非对称算法主要用于</strong>身份验证和协商密钥</strong>，因为非对称加密性能开销相当大且低效（相对对称加密而言）；而实际的数据传输则通过协商出的 <strong>会话密钥（Session Key）</strong> 使用高效的对称加密算法来加密。<br>简单来说，TLS（较早期的版本，例如TLS1.0&#x2F;1.1&#x2F;1.2）做了这些来保护你的密钥：</p><ul><li><p>生成一个对称加密密钥</p></li><li><p>使用非对称加密算法传输共享密钥</p></li><li><p>然后快乐加密</p></li></ul><p>但是，在新版的TLS1.3（<a href="https://datatracker.ietf.org/doc/html/rfc8446">RFC8446</a>定义）中，非对称加密对称密钥（通常使用RSA）的方法已被弃用，改为直接协商共同生成一个相同的密钥（<strong>注意：这个密钥从未被传输</strong>）。在实际使用中，通常使用 <strong>ECDHE（椭圆曲线 Diffie-Hellman 临时密钥交换）</strong> 交换方法。这种方式不仅提升了效率和安全性，还实现了所谓的 <strong>前向安全性（Forward Secrecy）</strong> —— 即使服务器的长期密钥将来被泄露，也无法解密过去的通信内容。<br>  所以TLS（更新的版本，如TLS1.3）做了这些来保护你的密钥：</p><ul><li><p>客户端和服务端同时协商密钥</p></li><li><p>各自协商出一个共同密钥</p></li><li><p>然后快乐加密</p></li></ul><p><strong>但是，在密钥协商过程中，服务器不会直接发送裸露的公钥，而是将SSL&#x2F;TLS证书（SSL&#x2F;TLS Certificate）发送给客户端以证明其身份。</strong></p><h3 id="1-2-为什么要有证书？"><a href="#1-2-为什么要有证书？" class="headerlink" title="1.2 为什么要有证书？"></a>1.2 为什么要有证书？</h3><p>即使我们使用了最强的加密方法，但我们现在依旧有个问题：怎么证明服务端是不是真正的服务端？</p><p>举个例子：客户端A要和服务端B建立连接，此时有攻击者C处在AB中间，C截获了A发送给B的报文，自己生成了一对公钥&#x2F;私钥，将自己的公钥伪装为服务端的公钥发送给A，自己伪装一个客户端向B发送报文，B将真实的公钥返回给攻击者C，于是客户端A、服务端B的连接在毫不知情的情况下被攻击者C截获，攻击者C将有能力完全解密客户端A和服务端B通信的所有内容并篡改，此时所谓加密也就形同虚设。这就是著名的<strong>MITM攻击（Man In The Middle，中间人攻击）</strong>。所以，为了确保密钥未被篡改和连接的安全，SSL&#x2F;TLS证书出现了。</p><p>简单来说：密钥本身<em>没有任何问题</em>，加密算法也没有，问题是<em><strong>你不知道密钥到底是谁的。</strong></em><br>所以，为了确保密钥未被篡改和连接的安全，我们需要一种<strong>验证服务端身份</strong>的机制——这就是证书的用途。</p><h2 id="2-怎么信任一个证书？"><a href="#2-怎么信任一个证书？" class="headerlink" title="2.怎么信任一个证书？"></a>2.怎么信任一个证书？</h2><h3 id="2-1-证书里有什么？"><a href="#2-1-证书里有什么？" class="headerlink" title="2.1 证书里有什么？"></a>2.1 证书里有什么？</h3><p>SSL&#x2F;TLS证书内部通常会包含这些部分（可能因版本或具体实现略有出入）：</p><ul><li>服务端的公钥</li><li>公用名、国家、组织</li><li>签发机构等</li><li><strong>SAN（Subject Alternative Name，主题备用名称）</strong>，用以覆盖多个主机名（不是所有证书都有）</li><li><strong>“签名”（Digital Signature，又名“公钥数码签名”）</strong>。</li></ul><p>签名不是由服务端自主生成的，而是来自<strong>CA（Certificate Authority，证书颁发机构）</strong>。只有由可信的CA签名颁发的证书才会被客户端所信任，客户端会在本地系统存有这些CA的根证书，即“受信任的根证书列表”，其中包含了这些CA的公钥，用于验证签名。</p><p>简单来说：证书的意义不在于加密通信，而是**“证明这个公钥是服务端的”。**</p><h3 id="2-2-怎么验证签名？"><a href="#2-2-怎么验证签名？" class="headerlink" title="2.2 怎么验证签名？"></a>2.2 怎么验证签名？</h3><p>SSL&#x2F;TLS证书内有CA的签名，那么如何验证？答案是签名算法。签名算法本质是摘要算法和非对称加密算法的结合，最主流的签名搭配是SHA-256和RSA-2048&#x2F;ECDSA或SM2和SM3（主要在中国大陆的部分服务使用，较少见）</p><p>要验证签名，我们需要先了解签名。数字签名的操作流程如下：</p><p><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250805004123735.webp"></p><p>我们可以看到，CA首先计算了证书数据hash并用私钥对其签名，随后将其写入签名域，所以CA的签名在技术上仅仅是一个被CA认证的哈希值，仅此而已。真正有价值的是“这段签名数据是CA用自己的私钥签名的”对这段数据真实性的保证作用，而不是这段签名数据本身。签名的作用是保证数据未被篡改，而不是存储证书信息（毕竟哈希算法不可逆对吧23333）。</p><p>所以，通过对CA签名过程的理解，我们自然不难推理出用户验签的过程。如图所示，用户在收到CA签名的证书后，会先将签名域的数据提取出来，使用CA的公钥还原CA签名时证书明文部分的哈希值，并同时计算证书明文部分的哈希值，将二者进行比对，如果相同则证明证书及服务端的密钥未被篡改，如果不同则表明证书被篡改而不可信。</p><p><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250805004329503.webp"></p><h2 id="3-我们怎么信任CA？"><a href="#3-我们怎么信任CA？" class="headerlink" title="3.我们怎么信任CA？"></a>3.我们怎么信任CA？</h2><h3 id="3-1-CA的证书哪里来？"><a href="#3-1-CA的证书哪里来？" class="headerlink" title="3.1 CA的证书哪里来？"></a>3.1 CA的证书哪里来？</h3><p>上文提到，我们需要用CA的公钥还原哈希值来验被签名的证书，那么我们哪来的CA的公钥？怎么确保CA的公钥是真的？答案就藏在你的操作系统的证书目录里，“受信任的根证书列表”就默默躺在那，提供CA的公钥供你比对（尽管这个过程都是软件自己完成就是）。</p><p><em>那我问你，CA的证书谁签名的？</em>——一位不愿透露姓名的网友</p><p>那我回答你，答案很简单：CA自己签的（也有一部分的CA是中级CA，由上游的CA签名）。事实就是这样，你别不信，有图有真相：</p><p><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/2025080500459347.webp"></p><blockquote><p>所以你可以这么理解：<br> 根CA就像“我们敬爱的***同志”，ta自己给自己签发证书，我们默认就信任；<br> 其他服务器的证书，只要是ta本人或ta的下属们签发的，我们也就信了。</p></blockquote><p><em><strong>这就是“信任链”，又名“证书链”</strong></em>。当然，这种建立在信任之上的安全似乎不怎么稳固……</p><p><em>那我问你，CA一滥权这个模型不就崩了？</em>——一位网友<br>那我回答你：<em><strong>啊对，就是这么个事！CA一滥权直接玩完，草（一种植物）！</strong></em></p><h3 id="3-2-怎么防止CA滥权和密钥泄露？"><a href="#3-2-怎么防止CA滥权和密钥泄露？" class="headerlink" title="3.2 怎么防止CA滥权和密钥泄露？"></a>3.2 怎么防止CA滥权和密钥泄露？</h3><p>2015年发生了一起CA滥权事件，由CNNIC发行的一个中级CA未经授权签发了一张Google域名的假证书，在当时引起巨大争议，此事件之后对于CA透明度的问题引起了行业重视，并对CA增加了监管。（资料出处：<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9C%8B%E4%BA%92%E8%81%AF%E7%B6%B2%E7%B5%A1%E4%BF%A1%E6%81%AF%E4%B8%AD%E5%BF%83#%E6%A0%B9%E8%AD%89%E6%9B%B8%E5%AE%89%E5%85%A8%E6%80%A7%E8%B3%AA%E7%96%91">维基百科</a>）<br>既然这个模型下如果CA滥权则信任体系即刻土崩瓦解，那我们怎么防止CA滥权？答案是引入一个新的监管机制，即<strong>CT（Certificate Transparency，证书透明度）</strong>。2018年起，任何CA签发的证书都需要登记在CT日志上，否则将不被信任。</p><p>但是，只有CT还不够。如果网站保管不当发生密钥泄漏事故或者CA滥权乱发证书，该怎么办？我们将引入一个新的机制：<strong>证书吊销列表（Certificate revocation list，CRL）</strong>。在这个列表上的证书都是因各种原因而被吊销的证书，它们将不再被任何的设备所信任，浏览器在接收服务端的证书时也会查询证书吊销列表确认该证书是否已被吊销以保证连接安全性。当然，CRL也有其问题，例如其实时性和可靠性较差，部分浏览器为速度快甚至根本不核查证书有效性。</p><p>当然，为了连接的安全性，在实际操作中还会引入新的机制，例如<strong>OCSP（Online Certificate Status Protocol，在线证书状态协议）</strong>，它定义浏览器在收到证书后向CA实时查询证书的有效性，但缺点也一样：实时性差，且对部分用户会造成隐私问题，故又有推出<strong>OCSP装订（OCSP Stapling）</strong>，服务器会在发送证书时发送预先缓存的OCSP相应而无需用户再次向CA发出请求查询证书有效性。但是OCSP装订同一时间只能发送一个OCSP响应，对于有中级证书的证书链并不够。该问题在RFC 6961中被解决。</p><hr><p><strong>参考资料：</strong><br><a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A">传输层安全性协议 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%9C%A8%E7%BA%BF%E8%AF%81%E4%B9%A6%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE">在线证书状态协议 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/OCSP%E8%A3%85%E8%AE%A2">OCSP装订 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84">数字证书认证机构 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%AF%81%E4%B9%A6%E9%80%8F%E6%98%8E%E5%BA%A6">证书透明度 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%AF%81%E4%B9%A6%E5%90%8A%E9%94%80%E5%88%97%E8%A1%A8">证书吊销列表 - Wikipedia</a></p><hr><p><strong>参见：</strong></p><p><a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E8%AF%81%E4%B9%A6">根证书 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E4%BB%BB%E9%8F%88">信任链 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6">自签名证书 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6">通配符证书 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/X.509">X.509 - Wikipedia</a></p><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">中间人攻击 - Wikipedia</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc8446">RFC 8446 - IETF</a>  </p><p><a href="https://datatracker.ietf.org/doc/html/rfc6961">RFC 6961 - IETF</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-引言&quot;&gt;&lt;a href=&quot;#0-引言&quot; class=&quot;headerlink&quot; title=&quot;0.引言&quot;&gt;&lt;/a&gt;0.引言&lt;/h2&gt;&lt;p&gt;这是Google的官方网站，在这里我们可以看到浏览器地址栏有一个“tune”图标表示这个连接是安全的。同时，我们可以点击这个</summary>
      
    
    
    
    <category term="科普" scheme="https://blog.wdfqx.top/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="HTTPS" scheme="https://blog.wdfqx.top/tags/HTTPS/"/>
    
    <category term="TLS" scheme="https://blog.wdfqx.top/tags/TLS/"/>
    
    <category term="SSL" scheme="https://blog.wdfqx.top/tags/SSL/"/>
    
    <category term="CA（证书颁发机构）" scheme="https://blog.wdfqx.top/tags/CA%EF%BC%88%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84%EF%BC%89/"/>
    
    <category term="MITM" scheme="https://blog.wdfqx.top/tags/MITM/"/>
    
    <category term="前向保密" scheme="https://blog.wdfqx.top/tags/%E5%89%8D%E5%90%91%E4%BF%9D%E5%AF%86/"/>
    
    <category term="数字证书" scheme="https://blog.wdfqx.top/tags/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/"/>
    
    <category term="证书透明度" scheme="https://blog.wdfqx.top/tags/%E8%AF%81%E4%B9%A6%E9%80%8F%E6%98%8E%E5%BA%A6/"/>
    
    <category term="信任链" scheme="https://blog.wdfqx.top/tags/%E4%BF%A1%E4%BB%BB%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>互联网广告捞金指南</title>
    <link href="https://blog.wdfqx.top/posts/fd50a647/"/>
    <id>https://blog.wdfqx.top/posts/fd50a647/</id>
    <published>2025-07-24T12:43:19.000Z</published>
    <updated>2025-07-24T12:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在2025年的今天，互联网广告已经<strong>充斥我们的生活</strong>，<em>那么，广告巨头们是怎么赚钱的？</em></p><p><strong>广告作为一种需要被广泛传播的信息，最需要的就是一个能高效传播信息的媒介，而互联网作为信息时代的高效传播媒介，天然契合广告的需求——所以互联网天然地适合投放广告。</strong></p><h2 id="1-世界上最早的广告——CPT广告"><a href="#1-世界上最早的广告——CPT广告" class="headerlink" title="1.世界上最早的广告——CPT广告"></a>1.世界上最早的广告——CPT广告</h2><p>世界上最早的互联网广告诞生于1994年，由美国运营商AT&amp;T在hotwired.com投放<img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250725003121011.webp" alt="img"></p><p>（图为AT&amp;T于1994年投放的广告）</p><p>此时，互联网广告仅仅是将报纸上的广告投放操作搬到了互联网上，当时的广告是按照投放时间来收费的，即<em>CPT广告（Cost Per Time Advertisement）</em></p><p><strong>但是，这种广告投放方式成本过高，在当时只有巨头能投放得起广告，高昂的成本形成了天然的屏障将中小广告主们隔绝在外。</strong> <strong>注：CPT广告在现在的互联网上已几乎绝迹。</strong></p><h2 id="2-更好的投放方式——CPM广告"><a href="#2-更好的投放方式——CPM广告" class="headerlink" title="2.更好的投放方式——CPM广告"></a>2.更好的投放方式——CPM广告</h2><p>如前所述，CPT广告的主要劣势就在于成本过高且不够灵活、不能有效地吸引客户，即不能精准投放。</p><p>于是，网站们联合制定了一种新的广告计费形式——<em>CPM广告（Cost Per Mile Advertisement）</em></p><p>CPM广告的优势在于：<strong>覆盖广、曝光量大、投放效果可预测、投放灵活</strong>，可谓是<em>秒杀</em> CPT广告。</p><p>CPM广告的含义为广告每展示1000次的成本，假设某公司出价10000元，广告被展示了100000次，则<strong>该广告的CPM</strong>为<strong>10000&#x2F;10&#x3D;100元</strong>。 现在的CPM广告多为<strong>展示量合约广告</strong>，即广告主和广告商之间的合约，约定<em>广告的展示单价（以1000次为单位）<em>和</em>广告展示次数</em>，给出报价，然后<strong>将广告推送给网站访客</strong>。</p><h3 id="2-1-更进一步——个性化广告"><a href="#2-1-更进一步——个性化广告" class="headerlink" title="2.1.更进一步——个性化广告"></a>2.1.更进一步——个性化广告</h3><p>与此同时，CPM广告也为<em>个性化广告（Personalized Advertisement）<em>的出现和流行奠定了基础，埋下了萌芽的种子。 <strong>举个例子：</strong> A科技公司计划花费<strong>10000元</strong>在技术论坛购买**100000次广告展示</em></em> 推广自家 <strong>管理系统</strong> ，但是该广告被推送到的访客中，仅<strong>50000人</strong>是需要建站的，剩下的<strong>50000人</strong>都是做网安的，对公司<strong>根本没用</strong>。如果论坛能够做到<em>精准推送广告</em>，A科技公司也会愿意<strong>花费6000元购买50000次广告展示</strong>，而剩下的50000次展示机会<em>还可以被平台售卖给网安企业</em>。</p><p><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250725023642874.webp" alt="img"></p><p>这样核算下来，网站的广告收入增加了（<strong>10000元–&gt;2x6000元&#x3D;12000元</strong>）；广告主的投放成本降低了（<strong>10000元–&gt;6000元</strong>），能让更多的中小广告主也投得起广告。这种技术叫做<strong>受众定向（Audience Targeting）</strong>，是提升广告体验的核心手段之一。现今互联网平台的 <strong>“用户画像”（Persona）</strong> 等都是由此演变的。</p><p>相比于CPT广告，CPM广告的创收速度更快——但是，CPM广告现在也<strong>不是最为主流的互联网广告形式</strong>了，<em>毕竟……谁会介意赚钱更快一点呢？</em>。</p><h2 id="3-更强大的模式——竞价广告"><a href="#3-更强大的模式——竞价广告" class="headerlink" title="3.更强大的模式——竞价广告"></a>3.更强大的模式——竞价广告</h2><p>——<strong>竞价广告（Auction Advertisements）<strong>是现今互联网上</strong>最为主流</strong>的广告形式。 你可能听说过，一些搜索引擎上的广告是竞价广告，但……事情远不止如此。现在，无论是Facebook、YouTube或是Bilibili、微信公众号等平台投放的广告绝大多数都已经是竞价广告了。</p><p><img src="https://cdn.jsdmirror.cn/gh/wdfqx/img/img/20250724235548765.webp" alt="img"></p><p>竞价广告作为一种广告交易模式，指的是：广告主们对于一个（或几个）广告位在后台出价，表明自己为了这个广告位愿意花多少钱，价高者得。<strong>但是</strong>，现在的竞价广告模式并非广告主出价多少就要支付其出价金额，因为这样竞价，网站赚钱<strong>反而不够快</strong>。 还是这个例子： A公司卖管理系统，和B公司竞争同一个广告位，A公司预算10000元，B公司预算20000元，如果出价和实付金额相同，那么B公司很快就会发现：不论自己出多少，<strong>只要</strong>自己的出价比A公司高就<em>一定能得到这个广告位</em>。假设有一家C公司加入这场竞价，C公司也会发现自己只需出价比B公司高就行了。所以，按照最小幅度加价试探，广告位的最低成交价将<strong>很容易地、快速地</strong>被<strong>所有公司</strong>知悉，平台难以实现利益最大化。</p><p><strong>那怎么办？</strong></p><p>以Google为首的大量平台，广泛地采取了另一种精妙的方式：<strong>广义第二高价（Generalized Second Pricing，GSP）</strong>。这种出价方式依然是价高者得，但是广告主只需支付<strong>第二高的报价</strong>即可获得该广告位，代入例子：B公司出价20000元最高，第二高的是A公司出价10000元，则广告位由B公司获得，其支付广告费用为<strong>A公司的出价</strong>，即10000元。<strong>平台看起来似乎亏了10000元</strong>，但实则不然，真正的奥秘是：无论B公司如何出价，都只需要支付<strong>10000元</strong>，所以B公司不会积极调整报价。此时，新的广告主C公司加入时，无论其出价几何，均需支付<strong>至少20000元</strong>（B公司出价）才能够获得这个广告位。</p><p>所以，在广义第二高价的竞争机制下，广告主难以试探出广告位的最低价格，故<strong>所有广告主</strong>都会大胆出价，广告主的报价<strong>往往接近</strong>其<strong>预算总额</strong>，由此，平台从广告主身上获得了<strong>最大的利润</strong>。</p><table><thead><tr><th align="left">广告主</th><th align="left">出价</th><th align="left">排名</th><th align="left">实际支付</th></tr></thead><tbody><tr><td align="left">C公司</td><td align="left">¥20000+</td><td align="left">1</td><td align="left"><strong>¥20000</strong>（B出价）</td></tr><tr><td align="left">B公司</td><td align="left">¥20000</td><td align="left">2</td><td align="left"><strong>¥10000</strong>（A出价）</td></tr><tr><td align="left">A公司</td><td align="left">¥10000</td><td align="left">3</td><td align="left"><strong>N&#x2F;A</strong></td></tr></tbody></table><h2 id="4-现实困境——隐私权的侵蚀和广告个性化的张力"><a href="#4-现实困境——隐私权的侵蚀和广告个性化的张力" class="headerlink" title="4.现实困境——隐私权的侵蚀和广告个性化的张力"></a>4.现实困境——隐私权的侵蚀和广告个性化的张力</h2><p><strong>用户定向技术</strong>依赖的是大规模的用户<strong>个人数据采集</strong>，而这与多数全球主要地区的相关隐私保护法规以及互联网平台用户的预期产生了<strong>根本性的冲突</strong>。 <strong>案例：<strong>2023年Meta因违反欧盟《通用数据保护条例》（GDPR）被罚款</strong>12亿欧元</strong>，创历史纪录。违规主因：将<strong>欧盟用户数据</strong>传输至美国服务器 <strong>，且未获得</strong> 用户的有效同意。</p><p>根据美国调查机构报告，81%的美国网民认为“广告平台对个人数据的控制带来的风险大于收益”，仅6%受访网民表示信任广告商能够妥善处理其网络数据。</p><p><strong>令人震惊的是</strong>，为互联网用户生成一个完整的用户画像需要采集超过2000个行为标签，包括定位轨迹、设备信息、社交图谱等，而获得的预测准确率仅为85%，这点超出了绝大多数用户认知。</p><hr><p><strong>参考资料：</strong></p><ol><li><a href="https://en.wikipedia.org/wiki/Cost_per_mille">Cost per mille - Wikipedia</a></li><li><a href="https://baike.baidu.com/item/CPT%E5%B9%BF%E5%91%8A/6938404">CPT广告 - 百度百科</a></li><li><a href="https://baike.baidu.com/item/%E7%AB%9E%E4%BB%B7%E5%B9%BF%E5%91%8A/6602655">竞价广告 - 百度百科</a></li><li><a href="https://baike.baidu.com/item/%E4%B8%AA%E6%80%A7%E5%8C%96%E5%B9%BF%E5%91%8A/56245136">个性化广告 - 百度百科</a></li><li><a href="https://edpb.europa.eu/news/news/2023/record-fine-against-meta-ireland_en">European Data Protection Board,EDPB&#x2F;2023&#x2F;07</a></li><li><a href="https://www.pewresearch.org/internet/2019/11/15/americans-and-privacy-concerned-confused-and-feeling-lack-of-control-over-their-personal-information/">Pew Research Center, “Americans and Privacy: Concerned, Confused and Feeling Lack of Control”</a></li><li><a href="https://dl.acm.org/toc/pacmhci/2023/7/CSCW1">Proceedings of the ACM on Human-Computer Interaction, Vol 7, CSCW1</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在2025年的今天，互联网广告已经&lt;strong&gt;充斥我们的生活&lt;/strong&gt;，&lt;em&gt;那么，广告巨头们是怎么赚钱的？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;广告作为一种需要被广泛传播的信息，最需要的就是一个能高效传播信息的媒介，而互联网作为信息时代的高效传播媒介，天</summary>
      
    
    
    
    <category term="科普" scheme="https://blog.wdfqx.top/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="互联网广告" scheme="https://blog.wdfqx.top/tags/%E4%BA%92%E8%81%94%E7%BD%91%E5%B9%BF%E5%91%8A/"/>
    
    <category term="广告变现" scheme="https://blog.wdfqx.top/tags/%E5%B9%BF%E5%91%8A%E5%8F%98%E7%8E%B0/"/>
    
    <category term="程序化广告" scheme="https://blog.wdfqx.top/tags/%E7%A8%8B%E5%BA%8F%E5%8C%96%E5%B9%BF%E5%91%8A/"/>
    
    <category term="CPM" scheme="https://blog.wdfqx.top/tags/CPM/"/>
    
    <category term="用户画像" scheme="https://blog.wdfqx.top/tags/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/"/>
    
    <category term="算法" scheme="https://blog.wdfqx.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="竞价广告" scheme="https://blog.wdfqx.top/tags/%E7%AB%9E%E4%BB%B7%E5%B9%BF%E5%91%8A/"/>
    
  </entry>
  
</feed>
